rep("z", 100)
),
1600
)
repetition <- c()
person <- c()
experiment <- c()
for (i in 1:16){ #experiments
print(i)
for (j in 1:10){ #persons
for (k in 1:10){ #repetitions
experiment <- c(experiment, rep(i, 300))
person <- c(person, rep(j, 300))
repetition <- c(repetition, rep(k, 300))
}
}
}
arm_dataframe <- data.frame(
pos <- raw_movement,
coordinate <- as.factor(coordinate),
repetition <- as.factor(repetition),
person <- as.factor(person),
experiment <- as.factor(experiment))
#Use last (control) experiment as reference
levels(arm_dataframe$experiment) <-c(2:16, 1)
model <- lm(pos ~ coordinate + repetition + person)
anova(model)
summary(model)
raw_movement <- unlist(armdata[[3]], recursive = T)
coordinate <- rep( c(
rep("x", 100),
rep("y", 100),
rep("z", 100)
),
1600
)
raw_movement <- unlist(armdata[[3]], recursive = T)
coordinate <- rep( c(
rep("x", 100),
rep("y", 100),
rep("z", 100)
),
100
)
repetition <- c()
person <- c()
repetition <- c()
person <- c()
for (j in 1:10){ #persons
for (k in 1:10){ #repetitions
experiment <- c(experiment, rep(i, 300))
person <- c(person, rep(j, 300))
repetition <- c(repetition, rep(k, 300))
}
}
arm_dataframe <- data.frame(
pos <- raw_movement,
coordinate <- as.factor(coordinate),
repetition <- as.factor(repetition),
person <- as.factor(person))
#Use last (control) experiment as reference
levels(arm_dataframe$person) <-c(2:10, 1)
model <- lm(pos ~ coordinate + repetition + person)
anova(model)
summary(model)
View(arm_dataframe)
raw_movement <- unlist(armdata, recursive = T)
coordinate <- rep( c(
rep("x", 100),
rep("y", 100),
rep("z", 100)
),
100
)
repetition <- c()
person <- c()
for (j in 1:10){ #persons
for (k in 1:10){ #repetitions
person <- c(person, rep(j, 300))
repetition <- c(repetition, rep(k, 300))
}
}
arm_dataframe <- data.frame(
pos <- raw_movement,
coordinate <- as.factor(coordinate),
repetition <- as.factor(repetition),
person <- as.factor(person))
#Use last (control) experiment as reference
levels(arm_dataframe$person) <-c(2:10, 1)
model <- lm(pos ~ coordinate + repetition + person)
raw_movement <- unlist(armdata, recursive = T)
coordinate <- rep( c(
rep("x", 100),
rep("y", 100),
rep("z", 100)
),
100
)
coordinate <- rep( c(
rep("x", 100),
rep("y", 100),
rep("z", 100)
),
1600
)
repetition <- c()
person <- c()
coordinate
View(armdata)
View(arm_dataframe)
# Creates dataframe with columns person, rep, 100x, 100y, 100z
df <- data.frame(matrix(ncol = 302, nrow = 100));
names. <- rep(NA, 302);
names.[1] <- "person"; names.[2] <- "repetition";
for (i in 1:300) {
if (i <= 100) {
names.[i+2] <- paste(c("x", as.character(i)), collapse = "");
} else if (i <= 200) {
names.[i+2] <- paste(c("y", as.character(i-100)), collapse = "");
} else {
names.[i+2] <- paste(c("z", as.character(i-200)), collapse = "");
}
}
names(df) <- names.;names. <- rep(NA, 302);
names.[1] <- "person"; names.[2] <- "repetition";
for (i in 1:300) {
if (i <= 100) {
names.[i+2] <- paste(c("x", as.character(i)), collapse = "");
} else if (i <= 200) {
names.[i+2] <- paste(c("y", as.character(i-100)), collapse = "");
} else {
names.[i+2] <- paste(c("z", as.character(i-200)), collapse = "");
}
}
for (i in 1:10) {
for (j in 1:10) {
idx <- (i-1) * 10 + j;
df$person[idx] <- i;
df$repetition[idx] <- j;
df[idx, 3:302] <- as.vector(data_collection[[i]][[j]]);
}
}
df$person <- as.factor(df$person);
df$repetition <- as.factor(df$repetition);
View(df)
View(df)
install.packages("randomForest")
x0 <-c()
for (i in 1:10){
for (j in 1:10){
for (k in 1:3){
x0 <- c(x0, d[[i]][[j]][,k])
}
}
}
x0 <- matrix(x0,nrow=300, byrow=F)
y <- rep(1:10, each=10)
rep <- rep(1:10, times=10)
x0 <- data.frame(t(x0))
data <- cbind(y,rep,x0)
#Tjek for rows without data
any(is.na(x0))
tree.preds <- rep(NA, 100);
knn.preds <- rep(NA, 100);
for (i in 1:100) {
rf.model <- randomForest(as.factor(y) ~ . - rep, data = data, subset = setdiff(1:100, i));
tree.preds[i] <- predict(rf.model, data[i, ], type = "class");
knn.preds[i] <- knn(data[setdiff(1:100, i), 3:302], data[i, 3:302], cl = data[setdiff(1:100, i), ]$y, k = 3);
}
require(tree);
library(class);
library(randomForest);
for (i in 1:100) {
rf.model <- randomForest(as.factor(y) ~ . - rep, data = data, subset = setdiff(1:100, i));
tree.preds[i] <- predict(rf.model, data[i, ], type = "class");
knn.preds[i] <- knn(data[setdiff(1:100, i), 3:302], data[i, 3:302], cl = data[setdiff(1:100, i), ]$y, k = 3);
}
tree.acc <- mean(tree.preds == data$y);
knn.acc <- mean(knn.preds == data$y);
tree.acc
knn.acc
tree.preds
View(armdata)
View(arm_dataframe)
arm_dataframe <- data.frame(
pos <- raw_movement,
coordinate <- as.factor(coordinate),
repetition <- as.factor(repetition),
subject <- as.factor(subject),
experiment <- as.factor(experiment)
)
View(arm_dataframe)
# ASGERS KODE OVER ALLE EXPERIMENTER
raw_movement <- unlist(armdata, recursive = T)
coordinate <- rep( c(
rep("x", 100),
rep("y", 100),
rep("z", 100)
),
1600
)
repetition <- c()
subject <- c()
experiment <- c()
for (i in 1:16){ #experiments
print(i)
for (j in 1:10){ #persons
for (k in 1:10){ #repetitions
experiment <- c(experiment, rep(i, 300))
subject <- c(subject, rep(j, 300))
repetition <- c(repetition, rep(k, 300))
}
}
}
arm_dataframe <- data.frame(
pos <- raw_movement,
coordinate <- as.factor(coordinate),
repetition <- as.factor(repetition),
subject <- as.factor(subject),
experiment <- as.factor(experiment)
)
#Use last (control) experiment as reference
levels(arm_dataframe$experiment) <-c(2:16, 1)
model <- lm(pos ~ coordinate + repetition + subject + experiment)
anova(model)
summary(model)
?randomForest
library(MedianNorm)
install.packages(MedianNorm)
install.packages("MedianNorm")
load("~/OneDrive - Danmarks Tekniske Universitet/Uni/Statistisk_evaluering/StatiskEvaluering_3ugers/fosfor_data.Rdata")
data <- Phosphorous
plot(Phosphorous$DGT,Phosphorous$olsenP)
View(data)
data <- na.omit(Phosphorous)
plot(Phosphorous$DGT,Phosphorous$olsenP)
lmP = lm(yield ~ olsenP, data= Phosphorous)
lmP = lm(yield ~ olsenP, data= Phosphorous)
lmDGT = lm(yield ~ DGT, data= Phosphorous)
anova(lmP,lmDGT)
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
t.test(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$yield,Phosphorous$DGT)
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$yield,Phosphorous$DGT)
yfitted <- predict(phos.modelDGT)
lines(Phosphorous$yield, yfitted )
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$DGT, Phosphorous$yield)
yfitted <- predict(phos.modelDGT)
lines(Phosphorous$DGT, yfitted )
length(yfitted)
length(Phosphorous$DGT)
Phosphorous <- na.omit(Phosphorous)
plot(Phosphorous$DGT,Phosphorous$olsenP)
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$DGT, Phosphorous$yield)
yfitted <- predict(phos.modelDGT)
length(yfitted)
length(Phosphorous$DGT)
lines(Phosphorous$DGT, yfitted )
Phosphorous$LDGT <- log(Phosphorous$DGT)
phos.modelDGT <- nls(yield ~ alfa * LDGT/(beta + LDGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
plot(Phosphorous$LDGT, Phosphorous$yield)
yfitted <- predict(phos.modelLDGT)
yfitted <- predict(phos.modelDGT)
length(yfitted)
length(Phosphorous$DGT)
lines(Phosphorous$DGT, yfitted )
require(nlme)
Phosphorous$LDGT <- log(Phosphorous$DGT)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * LDGT/(beta + LDGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$LDGT, Phosphorous$yield)
yfitted <- predict(phos.modelDGT)
length(yfitted)
length(Phosphorous$DGT)
lines(Phosphorous$DGT, yfitted )
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$DGT, Phosphorous$yield)
yfitted <- predict(phos.modelDGT)
length(yfitted)
length(Phosphorous$DGT)
lines(Phosphorous$DGT, yfitted )
require(nlme)
Phosphorous$LDGT <- log(Phosphorous$DGT)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * LDGT/(beta + LDGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$LDGT, Phosphorous$yield)
yfitted <- predict(phos.modelLDGT)
require(nlme)
Phosphorous$LDGT <- log(Phosphorous$DGT)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * LDGT/(beta + LDGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$LDGT, Phosphorous$yield)
yfitted <- predict(phos.modelDGT)
length(yfitted)
length(Phosphorous$DGT)
lines(Phosphorous$DGT, yfitted )
plot(Phosphorous$LDGT, Phosphorous$yield)
plot(phos.modelP)
plot(phos.modelDGT)
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * LDGT/(beta + LDGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$LDGT, Phosphorous$yield)
yfitted <- predict(phos.modelDGT)
lines(Phosphorous$DGT, yfitted )
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
plot(Phosphorous$DGT, Phosphorous$yield)
yfitted <- predict(phos.modelDGT)
lines(Phosphorous$DGT, yfitted )
v<-seq(0,170,0.1)
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
v<-seq(0,170,0.1)
yfitted <- predict(phos.modelDGT,list(DGT=v))
plot(Phosphorous$DGT, Phosphorous$yield)
lines(yfitted,v)
lines(v,yfitted)
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
plot(phos.modelP)
plot(phos.modelDGT)
v<-seq(0,170,0.1)
yfitted <- predict(phos.modelDGT,list(DGT=v))
plot(Phosphorous$DGT, Phosphorous$yield)
lines(v,yfitted)
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
#plot(phos.modelP)
#plot(phos.modelDGT)
v1<-seq(0,170,0.1)
v2<-seq(0,170,0.1)
yfitted1 <- predict(phos.modelDGT,list(DGT=v1))
yfitted2 <- predict(phos.modelP,list(DGT=v2))
plot(Phosphorous$DGT, Phosphorous$yield)
lines(v1,yfitted1)
plot(Phosphorous$olsenP, Phosphorous$yield)
lines(v2,yfitted2)
length(v2)
length(v1)
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
#plot(phos.modelP)
#plot(phos.modelDGT)
v1<-seq(0,170,0.1)
v2<-seq(0,10,0.1)
yfitted1 <- predict(phos.modelDGT,list(DGT=v1))
yfitted2 <- predict(phos.modelP,list(DGT=v2))
plot(Phosphorous$DGT, Phosphorous$yield)
lines(v1,yfitted1)
plot(Phosphorous$olsenP, Phosphorous$yield)
lines(v2,yfitted2)
length(Phosphorous$olsenP)
length(Phosphorous$yield)
plot(Phosphorous$olsenP, Phosphorous$yield)
lines(v2,yfitted2)
v1<-seq(0,170,0.1)
v2<-seq(0,10,0.1)
yfitted1 <- predict(phos.modelDGT,list(DGT=v1))
yfitted2 <- predict(phos.modelP,list(DGT=v2))
plot(Phosphorous$DGT, Phosphorous$yield)
lines(v1,yfitted1)
plot(Phosphorous$DGT, Phosphorous$yield)
lines(v1,yfitted1)
plot(Phosphorous$olsenP, Phosphorous$yield)
lines(v2,yfitted2)
plot(Phosphorous$olsenP, Phosphorous$yield)
v2<-seq(0,9,0.1)
yfitted1 <- predict(phos.modelDGT,list(DGT=v1))
yfitted2 <- predict(phos.modelP,list(DGT=v2))
plot(Phosphorous$DGT, Phosphorous$yield)
lines(v1,yfitted1)
plot(Phosphorous$olsenP, Phosphorous$yield)
lines(v2,yfitted2)
length(yfitted1)
yfitted2 <- predict(phos.modelP,list(olsenP=v2))
require(nlme)
phos.modelP <- nls(yield ~ alfa * olsenP/(beta + olsenP) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
phos.modelDGT <- nls(yield ~ alfa * DGT/(beta + DGT) , data = Phosphorous,
start = list(alfa = 90 , beta = 1))
summary(phos.modelP)
summary(phos.modelDGT)
anova(phos.modelP, phos.modelDGT)
#plot(phos.modelP)
#plot(phos.modelDGT)
v1<-seq(0,170,0.1)
v2<-seq(0,9,0.1)
yfitted1 <- predict(phos.modelDGT,list(DGT=v1))
yfitted2 <- predict(phos.modelP,list(olsenP=v2))
plot(Phosphorous$DGT, Phosphorous$yield)
lines(v1,yfitted1)
plot(Phosphorous$olsenP, Phosphorous$yield)
lines(v2,yfitted2)
length(yfitted1)
install.packages("nlcor")
install.packages("installr")
updateR()
library(installr)
